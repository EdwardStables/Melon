module = KW_module module_name control_ports signal_ports module_body;
module_name = VL_variable;

control_ports = SS_open_bracket control_port_body SS_close_bracket | E;
control_port_body = control_port control_port_list;
control_port_list = SS_comma control_port_body | E;
control_port = OP_add VL_variable | OP_subtract VL_variable;

signal_ports = SS_open_parenthesis signal_port_body SS_close_parenthesis;
signal_port_body = signal_port signal_port_list | E;
signal_port_list = SS_comma signal_port_body | E;
signal_port = direction width signal_name;
direction = KW_input | KW_output;
width = SS_open_bracket VL_integer_literal SS_close_bracket | E;
signal_name = VL_variable;

module_body = SS_open_brace module_body_list SS_close_brace;
module_body_list = module_body_item module_body_list | E;
module_body_item = declaration | block | instantiation;

declaration = KW_signal width signal_name signal_name_list SS_semi_colon;
signal_name_list = SS_comma signal_name signal_name_list | E;

block = block_type block_body;
block_type = KW_proc | KW_comb;
block_body = SS_open_brace statement_list SS_close_brace |
             statement;
statement_list = statement statement_list | E;

statement = assignment_statement SS_semi_colon |
              if_statement;
if_statement = KW_if expr SS_open_brace statement_list SS_close_brace;
assignment_statement = VL_variable SS_assign expr;

expr = add_expr;
add_expr = bitw_expr add_tail;
add_tail = OP_add add_expr |
           OP_subtract add_expr |
           E;
bitw_expr = shift_expr bitw_tail;
bitw_tail = OP_and bitw_expr |
            OP_or bitw_expr |
            OP_xor bitw_expr |
            E;
shift_expr = concat_expr shift_tail;
shift_tail = OP_lsl shift_expr |
             OP_lsr shift_expr |
             E;
concat_expr = comp_expr concat_tail;
concat_tail = OP_concat concat_expr |
              E;
comp_expr = unary_expr comp_tail;
comp_tail = OP_equals comp_expr |
            OP_lt comp_expr |
            OP_lte comp_expr |
            OP_gt comp_expr |
            OP_gte comp_expr |
            E;

unary_expr = unary_op index_expr | index_expr;

index_expr = terminal_expr index_tail;
index_tail = SS_open_bracket expr SS_close_bracket | E;

terminal_expr = SS_open_parenthesis expr SS_close_parenthesis |
                VL_integer_literal |
                VL_variable;

unary_op = OP_and | OP_or | OP_negate | OP_xor;
binary_op = OP_add | OP_subtract | OP_and |
             OP_or | OP_xor | OP_lsl |
             OP_lsr | OP_concat | OP_equals;

instantiation = VL_variable VL_variable SS_open_parenthesis signal_connection_body SS_close_parenthesis SS_semi_colon;
signal_connection_body = signal_connection signal_connection_list | E;
signal_connection_list = SS_comma signal_connection signal_connection_list | E;
signal_connection = OP_dot VL_variable SS_open_parenthesis VL_variable SS_close_parenthesis;